[{"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\index.js":"1","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\App.js":"2","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Header.js":"4","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Footer.js":"5","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\HomeScreen.js":"6","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Product.js":"7","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Rating.js":"8","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\ProductScreen.js":"9","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\store.js":"10","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\productReducers.js":"11","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\productsConstants.js":"12","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\productActions.js":"13","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Message.js":"14","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Loader.js":"15","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\CartScreen.js":"16","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\cartReducers.js":"17","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\cartConstants.js":"18","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\cartActions.js":"19","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\userReducers.js":"20","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\userConstants.js":"21","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\LoginScreen.js":"22","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\FormContainer.js":"23","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\userActions.js":"24","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\RegisterScreen.js":"25","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\ProfileScreen.js":"26","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\ShippingScreen.js":"27","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\CheckoutSteps.js":"28","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\PaymentScreen.js":"29","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\orderReducers.js":"31","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\orderConstants.js":"32","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\orderActions.js":"33","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\OrderScreen.js":"34","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\UserListScreen.js":"35"},{"size":597,"mtime":1609041555541,"results":"36","hashOfConfig":"37"},{"size":1673,"mtime":1609475450981,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":2550,"mtime":1609475825397,"results":"40","hashOfConfig":"37"},{"size":329,"mtime":1608893284568,"results":"41","hashOfConfig":"37"},{"size":1054,"mtime":1609046328871,"results":"42","hashOfConfig":"37"},{"size":909,"mtime":1608910071291,"results":"43","hashOfConfig":"37"},{"size":1583,"mtime":1608958327577,"results":"44","hashOfConfig":"37"},{"size":4492,"mtime":1609251070922,"results":"45","hashOfConfig":"37"},{"size":1841,"mtime":1609473541145,"results":"46","hashOfConfig":"37"},{"size":1041,"mtime":1609140714214,"results":"47","hashOfConfig":"37"},{"size":374,"mtime":1609047437794,"results":"48","hashOfConfig":"37"},{"size":1235,"mtime":1609160658303,"results":"49","hashOfConfig":"37"},{"size":252,"mtime":1609046659725,"results":"50","hashOfConfig":"37"},{"size":408,"mtime":1609046148670,"results":"51","hashOfConfig":"37"},{"size":4007,"mtime":1609100143750,"results":"52","hashOfConfig":"37"},{"size":1303,"mtime":1609312952812,"results":"53","hashOfConfig":"37"},{"size":295,"mtime":1609312296419,"results":"54","hashOfConfig":"37"},{"size":1270,"mtime":1609215745335,"results":"55","hashOfConfig":"37"},{"size":2646,"mtime":1609479554185,"results":"56","hashOfConfig":"37"},{"size":1132,"mtime":1609479514451,"results":"57","hashOfConfig":"37"},{"size":2251,"mtime":1609171266971,"results":"58","hashOfConfig":"37"},{"size":350,"mtime":1609141689825,"results":"59","hashOfConfig":"37"},{"size":5165,"mtime":1609479664935,"results":"60","hashOfConfig":"37"},{"size":3489,"mtime":1609171399234,"results":"61","hashOfConfig":"37"},{"size":5716,"mtime":1609311683781,"results":"62","hashOfConfig":"37"},{"size":2575,"mtime":1609214408775,"results":"63","hashOfConfig":"37"},{"size":1719,"mtime":1609226365541,"results":"64","hashOfConfig":"37"},{"size":1550,"mtime":1609215910309,"results":"65","hashOfConfig":"37"},{"size":5482,"mtime":1609314494745,"results":"66","hashOfConfig":"37"},{"size":2394,"mtime":1609312058863,"results":"67","hashOfConfig":"37"},{"size":823,"mtime":1609311773195,"results":"68","hashOfConfig":"37"},{"size":3973,"mtime":1609313062893,"results":"69","hashOfConfig":"37"},{"size":6858,"mtime":1609269499007,"results":"70","hashOfConfig":"37"},{"size":2582,"mtime":1609476575529,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"18fnno3",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\index.js",[],["147","148"],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\App.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Header.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\HomeScreen.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Product.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\ProductScreen.js",["149"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  Card,\r\n  Button,\r\n  Form,\r\n} from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Rating from '../components/Rating';\r\nimport { listProductDetaills } from '../actions/productActions';\r\nimport { addToCart } from '../actions/cartActions';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\n\r\nconst ProductScreen = ({ history, match }) => {\r\n  const productId = match.params.id;\r\n  const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  const [qty, setQty] = useState(1);\r\n\r\n  const dispatch = useDispatch();\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { loading, error, product } = productDetails;\r\n  useEffect(() => {\r\n    dispatch(listProductDetaills(productId));\r\n  }, [dispatch, productId, qty]);\r\n\r\n  const addToCart = () => {\r\n    history.push(`/cart/${match.params.id}?qty=${qty}`);\r\n  };\r\n\r\n  // const addToCartHandler = (e) => {\r\n  //   dispatch(addToCart(product._id, qty));\r\n  //   history.push('/cart');\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Link className='btn btn-light my-3' to='/'>\r\n        Go Back\r\n      </Link>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <Row>\r\n          <Col md={6}>\r\n            <Image src={product.image} alt={product.name} fluid />\r\n          </Col>\r\n          <Col md={3}>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h3>{product.name}</h3>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Rating\r\n                  value={product.rating}\r\n                  text={`${product.numReviews} reviews`}\r\n                />\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>Price: ₹ {product.price}</ListGroup.Item>\r\n              <ListGroup.Item>\r\n                Description: {product.description}\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n            <Card>\r\n              <ListGroup varient='flush'>\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Price:</Col>\r\n                    <Col>\r\n                      <strong>₹ {product.price}</strong>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Status:</Col>\r\n                    <Col>\r\n                      {product.countInStock > 0 ? 'In Stock' : 'Out Of Stock'}\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n                {product.countInStock > 0 && (\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col>Qty</Col>\r\n                      <Col>\r\n                        <Form.Control\r\n                          as='select'\r\n                          value={qty}\r\n                          onChange={(e) => setQty(e.target.value)}\r\n                        >\r\n                          {product.countInStock > 10\r\n                            ? [...array].map((x) => (\r\n                                <option key={x} value={x}>\r\n                                  {x}\r\n                                </option>\r\n                              ))\r\n                            : [...Array(product.countInStock).keys()].map(\r\n                                (x) => (\r\n                                  <option key={x + 1} value={x + 1}>\r\n                                    {x + 1}\r\n                                  </option>\r\n                                )\r\n                              )}\r\n                        </Form.Control>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                )}\r\n                <ListGroup.Item>\r\n                  <Button\r\n                    onClick={addToCart}\r\n                    className='btn-block'\r\n                    type='button'\r\n                    disabled={product.countInStock === 0}\r\n                  >\r\n                    ADD TO CART\r\n                  </Button>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductScreen;\r\n","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\store.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\productsConstants.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\productActions.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Message.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\userActions.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\RegisterScreen.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\ProfileScreen.js",["150"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\r\nimport { listMyOrders } from '../actions/orderActions';\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { loading, error, user } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = userUpdateProfile;\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy);\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    } else {\r\n      if (!user.name || success) {\r\n        dispatch({ type: USER_UPDATE_PROFILE_RESET });\r\n        dispatch(getUserDetails('profile'));\r\n        dispatch(listMyOrders());\r\n      } else {\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user, success]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setMessage('Passwords do not match');\r\n    } else {\r\n      dispatch(updateUserProfile({ id: user._id, name, email, password }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>User Profile</h2>\r\n        {message && <Message variant='danger'>{message}</Message>}\r\n        {error && <Message variant='danger'>{error}</Message>}\r\n        {success && <Message variant='success'>Profile Updated</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId='name'>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type='name'\r\n              placeholder='Enter  name'\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group controlId='email'>\r\n            <Form.Label>Email</Form.Label>\r\n            <Form.Control\r\n              type='email'\r\n              placeholder='Enter email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group controlId='password'>\r\n            <Form.Label>password</Form.Label>\r\n            <Form.Control\r\n              type='password'\r\n              placeholder='Enter password'\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group controlId='confirmPassword'>\r\n            <Form.Label>Confirm Password</Form.Label>\r\n            <Form.Control\r\n              type='password'\r\n              placeholder='Confirm password'\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Button type='submit' variant='primary'>\r\n            Update\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n      <Col md={9}>\r\n        <h2>My Orders</h2>\r\n        {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders || orders.length === 0 ? (\r\n          <Message variant='danger'>No Orders Found</Message>\r\n        ) : (\r\n          <Table striped bordered hover responsive className='table-sm'>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAYMENT</th>\r\n                <th>DELIVERED</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td>{order._id}</td>\r\n                  <td>{order.createdAt.substring(0, 10)}</td>\r\n                  <td>{order.totalPrice}</td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      `${order.paymentMethod} ${order.paidAt.substring(0, 10)}`\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <LinkContainer to={`order/${order._id}`}>\r\n                      <Button className='btn-sm' variant='light'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\PlaceOrderScreen.js",["151"],"import React, { useEffect } from 'react';\r\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport { createOrder } from '../actions/orderActions';\r\n\r\nconst PlaceOrderScreen = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2);\r\n  };\r\n  const cart = useSelector((state) => state.cart);\r\n\r\n  cart.itemsPrice = addDecimals(\r\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n  );\r\n\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 1000 ? 0 : 40);\r\n\r\n  cart.taxPrice = addDecimals(Number((cart.itemsPrice * 0.05).toFixed(2)));\r\n\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2);\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate);\r\n  const { order, success, error } = orderCreate;\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/order/${order._id}`);\r\n    }\r\n  }, [history, success]);\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                  Address:\r\n                </strong>{' '}\r\n                {cart.shippingAddress.address},{cart.shippingAddress.city},\r\n                {cart.shippingAddress.pincode},{cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                Method:{' '}\r\n              </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your Cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image src={item.image} fluid rounded />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ₹{item.price} = ₹\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>₹ {cart.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>₹ {cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>GST</Col>\r\n                  <Col>₹ {cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                      Total\r\n                    </strong>\r\n                  </Col>\r\n                  <Col>\r\n                    <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                      ₹ {cart.totalPrice}\r\n                    </strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  Place Order\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrderScreen;\r\n","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\actions\\orderActions.js",[],"C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\OrderScreen.js",["152"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\n\r\nimport { getOrderDetails, payOrder } from '../actions/orderActions';\r\nimport { ORDER_PAY_RESET } from '../constants/orderConstants';\r\n\r\nconst OrderScreen = ({ match }) => {\r\n  const orderId = match.params.id;\r\n\r\n  const [sdkReady, setSdkReady] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { order, loading, error } = orderDetails;\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const { loading: loadingPay, success: successPay } = orderPay;\r\n\r\n  useEffect(() => {\r\n    const addPaypalScript = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal');\r\n      const script = document.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=INR`;\r\n      script.async = true;\r\n      script.onload = () => {\r\n        setSdkReady(true);\r\n      };\r\n      document.body.appendChild(script);\r\n    };\r\n    if (!order || order._id !== orderId || successPay) {\r\n      dispatch({ type: ORDER_PAY_RESET });\r\n      dispatch(getOrderDetails(orderId));\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPaypalScript();\r\n      } else {\r\n        setSdkReady(true);\r\n      }\r\n    }\r\n  }, [dispatch, order, orderId, successPay]);\r\n\r\n  const sucessPaymentHandler = (paymentResult) => {\r\n    dispatch(payOrder(orderId, paymentResult));\r\n  };\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant='danger'>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h1>Order {order._id}</h1>{' '}\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h2>Shipping Details</h2>\r\n              <p>\r\n                {' '}\r\n                <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                  Name:{' '}\r\n                </strong>{' '}\r\n                {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                  Email:{' '}\r\n                </strong>{' '}\r\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>{' '}\r\n              </p>\r\n\r\n              <p>\r\n                <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                  Address:\r\n                </strong>{' '}\r\n                {order.shippingAddress.address},{order.shippingAddress.city},\r\n                {order.shippingAddress.pincode},{order.shippingAddress.country}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                <Message variant='success'>\r\n                  Delivered on {order.deliveredAt}\r\n                </Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Delivered</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              <p>\r\n                <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                  Method:{' '}\r\n                </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n              {order.isPaid ? (\r\n                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image src={item.image} fluid rounded />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ₹{item.price} = ₹\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>₹ {order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>₹ {order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>GST</Col>\r\n                  <Col>₹ {order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>\r\n                    <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                      Total\r\n                    </strong>\r\n                  </Col>\r\n                  <Col>\r\n                    <strong style={{ fontWeight: 'bold', color: 'black' }}>\r\n                      ₹ {order.totalPrice}\r\n                    </strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      currency='INR'\r\n                      amount={order.totalPrice}\r\n                      onSuccess={sucessPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderScreen;\r\n","C:\\Users\\anand\\OneDrive\\Desktop\\code\\BT Ecommerce\\frontend\\src\\screens\\UserListScreen.js",["153"],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":15,"column":10,"nodeType":"160","messageId":"161","endLine":15,"endColumn":19},{"ruleId":"158","severity":1,"message":"162","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":14},{"ruleId":"163","severity":1,"message":"164","line":38,"column":6,"nodeType":"165","endLine":38,"endColumn":24,"suggestions":"166"},{"ruleId":"158","severity":1,"message":"167","line":3,"column":44,"nodeType":"160","messageId":"161","endLine":3,"endColumn":50},{"ruleId":"163","severity":1,"message":"168","line":24,"column":6,"nodeType":"165","endLine":24,"endColumn":16,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'addToCart' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["172"],"'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["173"],"no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [history, order._id, success]",{"range":"178","text":"179"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"180","text":"181"},[1227,1245],"[history, order._id, success]",[789,799],"[dispatch, history, userInfo]"]